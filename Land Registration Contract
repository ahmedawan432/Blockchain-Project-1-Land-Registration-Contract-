pragma solidity >=0.7.0 <0.9.0;

contract LandRegistry{
    struct Landreg{
        uint LandId;
        uint Area;
        string City;
        string State;
        uint Landprice; 
        uint PropertyPID;
        address currentOwner;
    }

    struct Buyer{
        address Id;
        string Name;
        uint Age;
        string City;
        uint CNIC;
        string Email;
    }
    

    struct Seller{
        address Id;
        string Name;
        uint Age;
        string City;
        uint CNIC;
        string Email;
    }
    

    struct LandInspector{
        uint Id;
        string Name;
        uint Age;
        string Designation;
    }
    
    //Used mapping for storing data

    mapping(uint => Landreg) private landMapping;
    mapping(address => Buyer) private BuyerMapping;
    mapping(address => Seller) private SellerMapping;
    mapping(uint => LandInspector) private InspectorMapping;
    mapping(address => bool) private RegisteredSellersMapping;
    mapping(address => bool) private RegisteredBuyersMapping;
    mapping(address => bool) private SellerVerificationMapping;
    mapping(address => bool) private SellerRejectionMapping;
    mapping(address => bool) private BuyerRejectionMapping;
    mapping(address => bool) private BuyerVerificationMapping;
    mapping(uint => bool) private LandVerificationMapping;
    mapping(uint => bool) public PaymentReceived;
    
    uint inEther = 1000000000000000000;
    address public landinspector;
    address[] private selleraddress;
    address[] private buyeraddress;

    //public variables 
    uint public landsCount;

    // uint public inspectorsCount;
    uint public sellersCount;
    uint public buyersCount;

    event Registration(address _id);
    event Verified(address _id);
    event Rejected(address _id);
    event verifiedland(uint _id);

    constructor() payable{
        landinspector = msg.sender;
    }

    //modifier for Landinspector
    modifier Landins(){
        require(msg.sender == landinspector , "");
        _;
    }
    
    // Function for Seller Verification 
    function verifySeller(address _sellerId) public Landins(){

        SellerVerificationMapping[_sellerId] = true;
        emit Verified(_sellerId);
    }
    
    //Function for Seller Rejection
    function rejectSeller(address _sellerId) public Landins(){
        
        SellerRejectionMapping[_sellerId] = true;
        emit Rejected(_sellerId);
    }
    
    //Function for Buyer Verification
    function verifyBuyer(address _buyerId) public Landins(){
        
        BuyerVerificationMapping[_buyerId] = true;
        emit Verified(_buyerId);
    }
    
    //Function for Buyer Rejection
    function rejectBuyer(address _buyerId) public Landins(){

        BuyerRejectionMapping[_buyerId] = true;
        emit Rejected(_buyerId);
    }
    
    //Function for Land Verification
    function verifyLand(uint landId) public Landins(){
        LandVerificationMapping[landId] = true;
        emit verifiedland(landId);
    }
    
    //Function for checking the land is verified or not verified
    function isLandVerified(uint _id) public view returns (bool) {
        if(LandVerificationMapping[_id]){
            return true;
        }

        else{
            return false;
        }
    }
    
    //Function for verification of sellers or buyers
    function isVerified(address _id) private view returns (bool) {
        if(SellerVerificationMapping[_id] || BuyerVerificationMapping[_id]){
            return true;
        }

        else{
            return false;
        }
    }
    
    //Function for Rejected sellers or buyers
    function isRejected(address _id) private view returns (bool) {
        if(SellerRejectionMapping[_id] || BuyerRejectionMapping[_id]){
            return true;
        }

        else{
            return false;
        }
    }
    
    //Function for checking seller is registered or not registered
    function isSellerReg(address _id) public view returns (bool) {
        if(RegisteredSellersMapping[_id]){
            return true;
        }

        else{
            return false;
        }
    }

    //Function for checking the buyer is registered
    function isBuyerReg(address _id) public view returns (bool) {
        if(RegisteredBuyersMapping[_id]){
            return true;
        }

        else{
            return false;
        }
    }
    
    
    //Function for Land registeration by verified seller
    function RegisterLand(uint LandId , uint Area, string memory City, string memory state, uint Landprice, uint PropertyPID) public{
      
        require((isSellerReg(msg.sender)) && (isVerified(msg.sender))); 
        Landprice = Landprice * inEther; 
         landsCount++;
         landMapping[LandId] = Landreg(LandId, Area, City, state, Landprice, PropertyPID, msg.sender);
    }

    function getLandCity(uint c) public view returns (string memory){
        return landMapping[c].City;
    }
    
    function getLandPrice(uint _landId) public view returns (uint){
        return landMapping[_landId].Landprice;
    }
    
    function getLandArea(uint a) public view returns (uint){
        return landMapping[a].Area;
    }
    
    function LandSeller(address Id, string memory name, uint Age, string memory City, uint CNIC, string memory Email) public{
        require(RegisteredBuyersMapping[Id] == false && RegisteredBuyersMapping[msg.sender] == false, "You can not register as Seller");
        RegisteredSellersMapping[Id] = true;
        SellerMapping[Id] = Seller(msg.sender, name, Age, City, CNIC, Email);
        sellersCount++;
        selleraddress.push(Id);
        emit Registration(msg.sender);
    }

    function updateSeller(address _id, string memory _name, uint _age, string memory _city, uint _CNIC, string memory _Email) public {
        require(SellerMapping[msg.sender].Id == msg.sender);
        SellerMapping[_id].Name = _name;
        SellerMapping[_id].Age = _age;
        SellerMapping[_id].City = _city;
        SellerMapping[_id].CNIC = _CNIC;
        SellerMapping[_id].Email = _Email;

    }

    function getSeller() private view returns( address [] memory ){
        return(selleraddress);
    }
    
    //Function for Register Landbuyers
    function LandBuyer(address Id, string memory name, uint Age, string memory City, uint CNIC, string memory Email) public{
        require(RegisteredSellersMapping[Id] == false && RegisteredSellersMapping[msg.sender] == false, "You can not register as Buyer");
        RegisteredBuyersMapping[Id] = true;
        BuyerMapping[Id] = Buyer(msg.sender, name, Age, City, CNIC, Email);
        buyersCount++;
        buyeraddress.push(Id);
        emit Registration(msg.sender);
    }

    function updateBuyer(address _id, string memory _name, uint _age, string memory _city, uint _CNIC, string memory _Email) public {
        require(BuyerMapping[msg.sender].Id == msg.sender);
        BuyerMapping[_id].Name = _name;
        BuyerMapping[_id].Age = _age;
        BuyerMapping[_id].City = _city;
        BuyerMapping[_id].CNIC = _CNIC;
        BuyerMapping[_id].Email = _Email;

    }
  
    function Payment(uint _landId) public payable returns (bool){       
        
        require(BuyerVerificationMapping[msg.sender] == true && LandVerificationMapping[_landId] == true);
        if (BuyerVerificationMapping[msg.sender] == true && LandVerificationMapping[_landId] == true){
            require(landMapping[_landId].Landprice == msg.value , "Please Pay correct Amount");
            payable(landMapping[_landId].currentOwner).transfer(msg.value);
            landMapping[_landId].currentOwner = msg.sender;
        }
        else {
            return false;
        }
    }

    function getBuyer() private view returns( address [] memory ){
        return(buyeraddress);
    }

    //Function change the land ownership
    function LandOwnershipTransfer(uint _landId, address _newOwner) public Landins(){
            landMapping[_landId].currentOwner = _newOwner;
       
    }

}
